name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with: 
          fetch-depth: 0

    # - name: Git Semantic Version
    #   uses: PaulHatch/semantic-version@v4.0.3
    #   with:
    #     major_pattern: "major:"
    #     minor_pattern: "feat:"
    #     version_format: "${major}.${minor}.${patch}-prerelease${increment}"
    #   id: version

    - uses: paulhatch/semantic-version@v4.0.3
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}-prerelease${increment}"
        # tags like 'v1.0.0' will be recognized.
        short_tags: true
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
      id: version
        
    - name: Docker auth
      env:
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASS: ${{secrets.DOCKER_PASS}}
        NEW_VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "Logging in Docker"
        docker login -u $DOCKER_USER -p $DOCKER_PASS
        echo "New version: $NEW_VERSION"
        
    # - name: Build the Docker image
    #   run: |
    #     docker build --tag to1edo/docker-graphql:$NEW_VERSION .
        
    # - name: Push the Docker image
    #   run: |
    #     docker push to1edo/docker-graphql:$NEW_VERSION
